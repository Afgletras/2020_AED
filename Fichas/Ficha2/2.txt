2.
a) T(n) = 1n*n*n = n^3 -->                                                            O(n^3)

b) T(n) = n + n + n = 3n -->                                                          O(n)

c) T(n) = (1/2)n = n -->                                                              O(n)

d) T(n) = 1n * 3 = 3n -->                                                             O(n)

e) T(n) = 1 n^2 = n^2 -->                                                             O(n^2)

f) T(n) = 3(((n-1)(n+1))/2)) = 3(n^2-1) = 3n^2-3 -->                                  O(n^2)

g) T(n) =  (n+1-1) * log(n) = nlog(n) -->                                             O(log(n))

i) T(n) = (n + (5n)/2 + (n/2)*(n/3)) * n = n((7n/2) + (n^2/6)) = (7n^2)/2 + n^3/6 --> O(n^3)


3.
a) Operação de comparação: if A[i] > maxval

b) T(n) = (n-1)*(n-1) = n^2 - 2n + 1  -->  O(n^2)

c) n^2


4.
a) Operação de comparação: if A[i] = A[j] return false

b) T(n) = (n-1)(n-1)(n-2) = n^3 - 4n^2 + 5n - 2

c) O(n^3)


5.
a) O input size é n*n = n^2

b) Operação de atribuição: C[i,j] <- C[i,j] + A[i,k] * B[k, j]

c) T(n) = (n-1)^3 = n^3-3n^2+3n-1

d) O(n^3)